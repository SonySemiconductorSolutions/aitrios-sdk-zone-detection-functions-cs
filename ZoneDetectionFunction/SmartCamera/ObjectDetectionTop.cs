/*
 * Copyright (c) 2023 Sony Semiconductor Solutions Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
*/
// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SmartCamera
{

using global::System;
using global::FlatBuffers;

public struct ObjectDetectionTop : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ObjectDetectionTop GetRootAsObjectDetectionTop(ByteBuffer _bb) { return GetRootAsObjectDetectionTop(_bb, new ObjectDetectionTop()); }
  public static ObjectDetectionTop GetRootAsObjectDetectionTop(ByteBuffer _bb, ObjectDetectionTop obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ObjectDetectionTop __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ObjectDetectionData? Perception { get { int o = __p.__offset(4); return o != 0 ? (ObjectDetectionData?)(new ObjectDetectionData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<ObjectDetectionTop> CreateObjectDetectionTop(FlatBufferBuilder builder,
      Offset<ObjectDetectionData> perceptionOffset = default(Offset<ObjectDetectionData>)) {
    builder.StartObject(1);
    ObjectDetectionTop.AddPerception(builder, perceptionOffset);
    return ObjectDetectionTop.EndObjectDetectionTop(builder);
  }

  public static void StartObjectDetectionTop(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddPerception(FlatBufferBuilder builder, Offset<ObjectDetectionData> perceptionOffset) { builder.AddOffset(0, perceptionOffset.Value, 0); }
  public static Offset<ObjectDetectionTop> EndObjectDetectionTop(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ObjectDetectionTop>(o);
  }
  public static void FinishObjectDetectionTopBuffer(FlatBufferBuilder builder, Offset<ObjectDetectionTop> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedObjectDetectionTopBuffer(FlatBufferBuilder builder, Offset<ObjectDetectionTop> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
